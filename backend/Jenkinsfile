pipeline {
    agent any
    environment {
        DOCKER_HUB_REPO = 'nbowow_ec2test_server'
        DOCKER_HUB_CREDENTIALS = 'docker-credentials' // Jenkins에 저장한 Docker Hub 크리덴셜 ID
        EC2_SERVER_IP = '3.34.192.220'
        EC2_USER = 'ec2-user'
    }

    stages {
        stage('Checkout') {
            steps {
                // GitHub에서 코드 체크아웃
                checkout scm
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                // application.yml 파일 포함
                configFileProvider([configFile(fileId: '8923306b-09e3-4c26-a663-87096387133f', targetLocation: 'backend/application.yml')]) {
                    dir('backend') {
                        // Docker 이미지 빌드 및 푸시
                        script {
                            sh 'ls -l'
                            sh 'docker build -t ${DOCKER_HUB_REPO}:latest .'
                            withCredentials([usernamePassword(credentialsId: "${DOCKER_HUB_CREDENTIALS}", usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                                sh """
                                echo "${DOCKER_PASS}" | docker login -u "${DOCKER_USER}" --password-stdin
                                docker push ${DOCKER_HUB_REPO}:latest
                                """
                            }
                        }
                    }
                }
            }
        }

        stage('Deploy to EC2') {
            steps {
                sshPublisher(
                    publishers: [
                        sshPublisherDesc(
                            configName: 'EC2_SSH', // Publish over SSH 플러그인 설정 이름
                            transfers: [
                                sshTransfer(
                                    execCommand: """
                                    docker pull ${DOCKER_HUB_REPO}:latest
                                    docker stop backend || true
                                    docker rm backend || true
                                    docker run -d --name backend -p 8080:8080 ${DOCKER_HUB_REPO}:latest
                                    """
                                )
                            ]
                        )
                    ]
                )
            }
        }

    }
    post {
        always {
            // 빌드 결과 알림 (선택 사항)
            echo "Pipeline execution completed!"
        }
    }
}
